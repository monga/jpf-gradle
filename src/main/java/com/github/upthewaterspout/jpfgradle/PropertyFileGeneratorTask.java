package com.github.upthewaterspout.jpfgradle;

import org.gradle.api.DefaultTask;
import org.gradle.api.Project;
import org.gradle.api.plugins.JavaPlugin;
import org.gradle.api.plugins.JavaPluginConvention;
import org.gradle.api.tasks.OutputFile;
import org.gradle.api.tasks.SourceSet;
import org.gradle.api.tasks.TaskAction;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;

public class PropertyFileGeneratorTask extends DefaultTask {
  public static final String SOURCE_SET_NAME = SourceSet.TEST_SOURCE_SET_NAME;
  private final File outputFile;

  public PropertyFileGeneratorTask() {
    outputFile = new File(getProject().getRootDir(), "jpf.properties");
  }

  @OutputFile
  public File getOutputFile() {
    return outputFile;
  }

  @TaskAction
  public void generateJpfProperties() throws IOException {
    Properties properties = new Properties();
    setClasspathAndSourcePath(properties);

    try(FileOutputStream fos = new FileOutputStream(outputFile)) {
      properties.store(fos, "Generated by jpf-gradle plugin. Do not edit by hand");
    }


  }

  private void setClasspathAndSourcePath(final Properties properties) {
    Project project = getProject();
    project.getPlugins().apply(JavaPlugin.class);
    JavaPluginConvention javaConvention =
                project.getConvention().getPlugin(JavaPluginConvention.class);
    SourceSet sourceSet = javaConvention.getSourceSets().getByName(SOURCE_SET_NAME);

    String classpath = sourceSet.getRuntimeClasspath().getAsPath();
    properties.put("classpath", classpath);

    String sourcepath = sourceSet.getJava().getAsPath();
    properties.put("sourcepath", sourcepath);
  }
}
